name: Run custom Helm chart tests
description: Runs custom Helm chart tests
inputs:
  test_path:
    description: 'The path to the test directory'
    required: true
  value_file:
    description: 'The path to the values file'
    required: true
  kube_api_version:
    description: 'The Kubernetes API version'
    required: true
    default: "1.26.5"
runs:
  using: "composite"
  steps:
  - name: Install Helm Chart dependencies
    working-directory: ${{ inputs.test_path }}
    shell: bash
    run: |
      resolve-helm-chart-dependencies () {
        if [ -z $1 ]; then
          echo "No chart directory provided. Using current directory."
          startdir=$(pwd)
        else
          startdir=$1
        fi
        pushd $startdir
        if [ -f ./Chart.yaml ]; then
          found_deps=$(yq ".dependencies" ./Chart.yaml)
          if [[ "$found_deps" != "null" || "$found_deps" != "" ]]; then
            echo "Resolving dependencies for $startdir"
            helm dep build .
            for chartzip in `find charts -maxdepth 1 -name '*.tgz' -type f`; do
              echo "untar $chartzip:"
              tar xfz $chartzip -C charts &>/dev/null
              echo "determine chart directory:"
              charttarlist=$(tar -tzf $chartzip)
              chartzipdir=$(echo $charttarlist | head -n 1 | cut -f 1 -d "/")
              echo; echo; echo "Resolving dependencies for $chartzipdir"; echo; echo; echo
              resolve-helm-chart-dependencies charts/$chartzipdir
            done
          else
            echo "No dependencies found in $startdir/Chart.yaml"
          fi
        else
          echo "No Chart.yaml found in $startdir"
        fi
        popd
      }  
      resolve-helm-chart-dependencies .


  - name: Lint Helm Chart
    working-directory: ${{ inputs.test_path }}
    shell: bash
    run: |
      helm lint .  --values ${{ inputs.value_file }}
    
  - name: Build Helm Template
    working-directory: ${{ inputs.test_path }}
    shell: bash
    run: |
      mkdir -p output
      helm template . --values ${{ inputs.value_file }} --output-dir ./output

  - name: Validate Helm Chart
    working-directory: ${{ inputs.test_path }}
    shell: bash
    run: |
      kubeconform -strict -summary -kubernetes-version ${{ inputs.kube_api_version }} -exit-on-error ./output

  - name: Output charts
    working-directory: ${{ inputs.test_path }}
    shell: bash
    run: |
      for file in $(find ./output -type f -name "*.yaml"); do
        echo $file; echo; echo; cat $file; echo; echo;
      done